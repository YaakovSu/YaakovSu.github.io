---
layout: post
title: "Python学习笔记（-）"
subtitle: ""
date: 2015-06-09
author: 苏爱马
category: Python
tags: 笔记 Python
finished: true
---

很多统计使用python都能达到事半功倍的效果，所以开始了python的学习，下面是对python的一些学习笔记，对自己学习进行一个总结，也为以后更快的查找到相关方法。
## Python学习

### print（）
print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：
{% highlight html %}
>>> print('The quick brown fox', 'jumps over', 'the lazy dog')
The quick brown fox jumps over the lazy dog
{% endhighlight %}

print()会依次打印每个字符串，遇到逗号“,”会输出一个空格，因此，输出的字符串是这样拼起来的：


### input（）
输入

现在，你已经可以用print()输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：

{% highlight html %}
>>> name = input()
Michael
{% endhighlight %}

当你输入name = input()并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。input()可以让你显示一个字符串来提示用户，于是我们把代码改成：

{% highlight html %}
name = input('please enter your name: ')
print('hello,', name)
{% endhighlight %}

### Python程序大小写敏感
如果写错了大小写，程序会报错照。约定俗成的管理，应该始终坚持使用4个空格的缩进。Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。
在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。

### Python允许用'''...'''
如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容，可以自己试试：

{% highlight html %}
>>> print('''line1
... line2
... line3''')
line1
line2
line3
{% endhighlight %}

上面是在交互式命令行内输入，注意在输入多行内容时，提示符由>>>变为...，提示你可以接着上一行输入。如果写成程序，就是：
{% highlight html %}
print('''line1
line2
line3''')
{% endhighlight %}
多行字符串'''...'''还可以在前面加上r使用，请自行测试。



### 空值

空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。

此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。


### 常量

在Python中，通常用全部大写的变量名表示常量。

对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：

### 编码问题
以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：
{% highlight html %}
>>> 'ABC'.encode('ascii')
b'ABC'
>>> '中文'.encode('utf-8')
b'\xe4\xb8\xad\xe6\x96\x87'
>>> '中文'.encode('ascii')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
{% endhighlight %}
纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。

在bytes中，无法显示为ASCII字符的字节，用\x##显示。

反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：

{% highlight html %}
>>> b'ABC'.decode('ascii')
'ABC'
>>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
'中文'
{% endhighlight %}
要计算str包含多少个字符，可以用len()函数：
{% highlight html %}
>>> len('ABC')
3
>>> len('中文')
2
{% endhighlight %}
len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：

由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
{% highlight html %}
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
{% endhighlight %}
第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；

第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。

### 格式化
如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
{% highlight html %}
>>> 'Age: %s. Gender: %s' % (25, True)
'Age: 25. Gender: True'
{% endhighlight %}
有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
{% highlight html %}
>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'
{% endhighlight %}
### list
比如，列出班里所有同学的名字，就可以用一个list表示：
{% highlight html %}
>>> classmates = ['Michael', 'Bob', 'Tracy']
>>> classmates
['Michael', 'Bob', 'Tracy']
{% endhighlight %}
当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - 1。
如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：
{% highlight html %}
>>> classmates[-1]
'Tracy'
{% endhighlight %}
以此类推，可以获取倒数第2个、倒数第3个：
{% highlight html %}
>>> classmates[-2]
'Bob'
>>> classmates[-3]
'Michael'
{% endhighlight %}
list是一个可变的有序表，所以，可以往list中追加元素到末尾：
{% highlight html %}
>>> classmates.append('Adam')
>>> classmates
['Michael', 'Bob', 'Tracy', 'Adam']
{% endhighlight %}
也可以把元素插入到指定的位置，比如索引号为1的位置：
{% highlight html %}
>>> classmates.insert(1, 'Jack')
>>> classmates
['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
{% endhighlight %}
要删除list末尾的元素，用pop()方法：
{% highlight html %}
>>> classmates.pop()
'Adam'
>>> classmates
['Michael', 'Jack', 'Bob', 'Tracy']
{% endhighlight %}
要删除指定位置的元素，用pop(i)方法，其中i是索引位置：
{% highlight html %}
>>> classmates.pop(1)
'Jack'
>>> classmates
['Michael', 'Bob', 'Tracy']
{% endhighlight %}
要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
{% highlight html %}
>>> classmates[1] = 'Sarah'
>>> classmates
['Michael', 'Sarah', 'Tracy']
{% endhighlight %}
list里面的元素的数据类型也可以不同，比如：
{% highlight html %}
>>> L = ['Apple', 123, True]
{% endhighlight %}
list元素也可以是另一个list，比如：
{% highlight html %}
>>> s = ['python', 'java', ['asp', 'php'], 'scheme']
>>> len(s)
4
{% endhighlight %}
要注意s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：
{% highlight html %}
>>> p = ['asp', 'php']
>>> s = ['python', 'java', p, 'scheme']
{% endhighlight %}
要拿到'php'可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。


### tuple
Tuple是另一种有序列表，称为元组。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：
{% highlight html %}
>>> classmates = ('Michael', 'Bob', 'Tracy')
{% endhighlight %}
现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。

但是，要定义一个只有1个元素的tuple，如果你这么定义：
{% highlight html %}
>>> t = (1)
>>> t
1
{% endhighlight %}
定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。

所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：
{% highlight html %}
>>> t = (1,)
>>> t
(1,)
{% endhighlight %}
最后来看一个“可变的”tuple：
{% highlight html %}
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])
{% endhighlight %}
变得是list的值，并不是tuple的指向！

### if语句
完全可以用elif做更细致的判断：
{% highlight html %}
age = 3
if age >= 18:
    print('adult')
elif age >= 6:
    print('teenager')
else:
    print('kid')
{% endhighlight %}
elif是else if的缩写，完全可以有多个elif，所以if语句的完整形式就是：
{% highlight html %}
if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>
{% endhighlight %}
### 循环
Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，看例子：
{% highlight html %}
names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print(name)
{% endhighlight %}
Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从0开始小于5的整数：
第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：
{% highlight html %}
sum = 0
n = 99
while n > 0:
    sum = sum + n
    n = n - 2
print(sum)
{% endhighlight %}
在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。

### dict 和 set
Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。

用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：
{% highlight html %}
>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
>>> d['Michael']
95
{% endhighlight %}
为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。

第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。

dict就是第二种实现方式，给定一个名字，比如'Michael'，dict在内部就可以直接计算出Michael对应的存放成绩的“页码”，也就是95这个数字存放的内存地址，直接取出来，所以速度非常



放入新的key-value方法：

把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：
{% highlight html %}
>>> d['Adam'] = 67
>>> d['Adam']
67
{% endhighlight %}
由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：
{% highlight html %}
>>> d['Jack'] = 90
>>> d['Jack']
90
>>> d['Jack'] = 88
>>> d['Jack']
88
{% endhighlight %}
要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
{% highlight html %}
>>> 'Thomas' in d
False
{% endhighlight %}
二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
{% highlight html %}
>>> d.get('Thomas')
>>> d.get('Thomas', -1)
-1
{% endhighlight %}
注意：返回None的时候Python的交互式命令行不显示结果。

要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
{% highlight html %}
>>> d.pop('Bob')
75
>>> d
{'Michael': 95, 'Tracy': 85}
{% endhighlight %}
请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。

和list比较，dict有以下几个特点：

查找和插入的速度极快，不会随着key的增加而增加；
需要占用大量的内存，内存浪费多。

### set
set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。

要创建一个set，需要提供一个list作为输入集合：
{% highlight html %}
>>> s = set([1, 2, 3])
>>> s
{1, 2, 3}
{% endhighlight %}
注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。

重复元素在set中自动被过滤：
{% highlight html %}
>>> s = set([1, 1, 2, 2, 3, 3])
>>> s
{1, 2, 3}
{% endhighlight %}
通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果，通过remove(key)方法可以删除元素：：
{% highlight html %}
>>> s.add(4)
>>> s
{1, 2, 3, 4}
>>> s.add(4)
>>> s
{1, 2, 3, 4}
>>> s.remove(4)
>>> s
{1, 2, 3}
{% endhighlight %}
set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
{% highlight html %}
>>> s1 = set([1, 2, 3])
>>> s2 = set([2, 3, 4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}
{% endhighlight %}
set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。
